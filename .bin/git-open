#!/bin/sh

show_help() {
  echo "Usage: git open [-h] [-n|-c] [-b branch] [-r remote] [path]"
}

OPTERR=0

noopen=0
clipboard=0
remotes=(origin upstream $USER)
remote=
branchname=
lineno=

while getopts "hncr:b:l:" opt; do
  case "$opt" in
  h)
    show_help
    exit 0
    ;;
  n)
    noopen=1
    ;;
  c)
    clipboard=1
    ;;
  r)
    remote="$OPTARG"
    ;;
  b)
    branchname="$OPTARG"
    ;;
  l)
    lineno="$OPTARG"
    ;;
  ?)
    show_help
    exit 1
    ;;
  esac
done

if [ $noopen -eq 1 -a $clipboard -eq 1 ]; then
  show_help
  exit 1
fi

shift $(($OPTIND - 1))

filepath="$1"
if [ ! -z "$filepath" ]; then
  shift
fi

_echo() { echo "$@\c"; }

if type xclip >/dev/null 2>&1 && [ -n "$DISPLAY" ]; then
  XCLIP_IN="xclip -i";
  XCLIP_OUT="xclip -o";
elif type pbcopy >/dev/null 2>&1; then
  XCLIP_IN="pbcopy";
  XCLIP_OUT="pbpaste";
elif type /c/windows/system32/clip.exe >/dev/null 2>&1; then
  XCLIP_IN="/c/windows/system32/clip.exe"
  unset XCLIP_OUT
  _echo() { echo "$@"; }
else
  unset XCLIP_IN
  unset XCLIP_OUT
fi

if type xdg-open >/dev/null 2>&1 && [ -n "$DISPLAY" ]; then
  OPEN="xdg-open"
elif type open >/dev/null 2>&1; then
  OPEN="open"
elif type /c/windows/system32/explorer.exe >/dev/null 2>&1; then
  OPEN="/c/windows/system32/explorer.exe"
fi

cur="$(git symbolic-ref --quiet --short HEAD 2>/dev/null)"
if [ -z "$cur" ]; then
  cur="$(git rev-parse --short HEAD 2>/dev/null)"
fi

if [ "$branchname" = "cur" ]; then
  branchname="$(git rev-parse "$cur")"
  if [ -z "$remote" ]; then
    for remote in $(git branch --no-color --remotes --contains "$branchname"); do
      remote="${remote# }"
      remote="${remote%/*}"
      for known in "${remotes[@]}" __nope__; do
        [ "$known" = "$remote" ] && break
      done
      [ "$known" != "__nope__" ] && break
    done
  fi
fi

if [ -z "$remote" ]; then
  for remote in "${remotes[@]}"; do
    git remote get-url "$remote" >/dev/null 2>/dev/null && break
  done
fi

line=$(git remote get-url "$remote")

function isSshRemote() {
  remote="$1"
  [ -z "${remote##*@*:*}" ]
  return $?
}

if [ ! -z "$line" ]; then
  if isSshRemote "$line"; then
    host="${line#git@}"
    host="${host%:*}"
    path="${line#git@}"
    path="${path#${host}:}"
    path="${path%.git}"
  else
    host="${line#http*://}"
    host="${host%%/*}"
    path="${line#http*://$host/}"
  fi

  if [[ "$host" = *"-github.com" ]]; then
    host="github.com"
  fi
  echo "$host" >&2

  if [ -z "$branchname" ]; then
    branchname=""
    for branchname in "$cur" master; do
      git cat-file -p "$remote/$branchname" >/dev/null 2>/dev/null && break # Test to see if branch exists on remote... needed?
    done
  fi

  url="https://${host}/${path}"
  if [ "$branchname" != "master" ]; then
    url="$url/tree/$branchname"
  fi

  if [ ! -z "$filepath" ]; then
    if [ "$branchname" = "master" ]; then
      url="$url/tree/$branchname"
    fi
    url="$url/$filepath"
    if [ ! -z "$lineno" ]; then
      url="${url}/#L${lineno}"
    fi
  fi
fi

if [ $noopen -eq 1 ]; then
  echo "$url"
elif [ $clipboard -eq 1 ]; then
  _echo "$url" | $XCLIP_IN && echo "Copied to clipboard"
else
  $OPEN "$url"
fi
