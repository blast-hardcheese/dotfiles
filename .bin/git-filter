#!/usr/bin/env bash

# From https://stackoverflow.com/a/59592881
# SYNTAX:
#   catch STDOUT_VARIABLE STDERR_VARIABLE COMMAND [ARG1[ ARG2[ ...[ ARGN]]]]
catch() {
    {
        IFS=$'\n' read -r -d '' "${1}";
        IFS=$'\n' read -r -d '' "${2}";
        (IFS=$'\n' read -r -d '' _ERRNO_; return ${_ERRNO_});
    } < <(
        (
            printf \
                '\0%s\0%d\0' \
                "$(
                    ((({ shift 2; "${@}"; echo "${?}" 1>&3-; } | tr -d '\0' 1>&4-) 4>&2- 2>&1- | tr -d '\0' 1>&4-) 3>&1- | exit "$(cat)") 4>&1-
                )" \
                "${?}" \
                1>&2
        ) \
        2>&1
    )
}

die() {
    msg="$*"
    if [ -z "$msg" ]; then
        msg='Unknown invocation'
    fi
    echo "$msg. Usage: $0 'file*filter*.txt' -- cmd [arg1 [arg2 [arg3]]]" >&2
    exit 127
}

# git filter: Pipe all files matching pattern through a command.
#             Equivalent to: git ls-files "$pat" | xargs -n sh -c "$* < '\$0'"
#             ... but with error catching
git_filter() {
    while true; do
        case "$1" in
            --)
                shift
                break
                ;;
            *)
                if [ -z "$filter" ]; then
                    filter="$1"
                    shift
                else
                    die 'Missing command separator'
                fi
                ;;
        esac
    done

    if [ "${#@}" -eq 0 ]; then
        die 'Missing command specification'
    fi

    invocation=( "$@" )

    git ls-files "$filter" | while read path; do
        catch stdout stderr "$@" < "$path"
        if [ -n "$stdout" ] || [ -n "$stderr" ]; then
            echo "$path"
            [ -n "$stderr" ] && echo "$stderr" >&2
            [ -n "$stdout" ] && echo "$stdout"
        fi
    done
}

git_filter "$@"
